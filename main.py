import disnake
from disnake.ext import commands
import datetime
import os
import sqlite3
from config import settings

intents = disnake.Intents.all()

bot = commands.Bot(command_prefix = settings['prefix'], intents = intents)
bot.remove_command('help')

connection = sqlite3.connect('server.db')
cursor = connection.cursor()

TICKET_CHANNEL_ID = 1299473325327777802
date = datetime.datetime.today()

@bot.event #–ö–æ–¥ —á—Ç–æ–±—ã –±–æ—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—ã –∫–æ—Ç–æ—Ä—ã–µ –µ–º—É –ø–∏—à—É—Ç –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async def on_message(message):
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞
    if message.author == bot.user:
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –õ–°
    if isinstance(message.channel, disnake.DMChannel):
        await message.channel.send("–Ø –∏–≥–Ω–æ—Ä–∏—Ä—É—é –∫–æ–º–∞–Ω–¥—ã –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –õ–°.")
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    await bot.process_commands(message)

@bot.event
async def on_ready():
    channel = bot.get_channel(1299473325327777802)
    if channel:
        await channel.purge(limit=100)
        message = await channel.send("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã..")
        ctx = await bot.get_context(message)

        await ticket(ctx)

        await message.delete()

    cursor.execute("""CREATE TABLE IF NOT EXISTS users (
        name TEXT,
        id INT,
        cash BIGINT,
        rep INT,
        server_id INT
    )""")
    connection.commit()

    for guild in bot.guilds:
        for member in guild.members:
            if cursor.execute(f"SELECT id FROM users WHERE id = {member.id}").fetchone() is None:
                cursor.execute(f"INSERT INTO users VALUES ('{member}',{member.id},0,0, {guild.id})")
                connection.commit()
            else:
                pass

    connection.commit()
    await bot.change_presence(status = disnake.Status.dnd, activity = disnake.Activity(name = f'!help üë®‚Äç‚öñÔ∏è', type = disnake.ActivityType.playing))
    print('Bot connected')

@bot.event
async def on_member_join(member):
    if cursor.execute(f"SELECT id FROM users WHERE id = {member.id}").fetchone() is None:
        cursor.execute(f"INSERT INTO users VALUES ('{member}',{member.id},0,0, {member.guild.id})")
        connection.commit()
    else:
        pass

@bot.command(aliases = ['balance'])
async def __balance(ctx, member: disnake.Member = None):
    if member is None:
        await ctx.send(embed = disnake.Embed(
            description = f"""–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **{ctx.author}** 

            :leaves: **{cursor.execute("SELECT cash FROM users WHERE id = {}".format(ctx.author.id)).fetchone()[0]} :leaves:**"""
        ))
    else:
        await ctx.send(embed = disnake.Embed(
            description = f"""–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **{member}:** 

            :leaves: **{cursor.execute("SELECT cash FROM users WHERE id = {}".format(member.id)).fetchone()[0]} :leaves:**"""
        ))

@bot.command(aliases = ['award'])
async def __award(ctx, member: disnake.Member = None, amount: int = None):
    if ctx.message.author.guild_permissions.administrator:
        if member is None:
            await ctx.send(f"**{ctx.author}**, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –∂–µ–ª–∞–µ—Ç–µ –≤—ã–¥–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–Ω–Ω—É—é —Å—É–º–º—É")
        else:
            if amount is None:
                await ctx.send(f"**{ctx.author}**, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –∂–µ–ª–∞–µ—Ç–µ –Ω–∞—á–∏—Å–ª–∏—Ç—å –Ω–∞ —Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            elif amount < 1:
                await ctx.send(f"*{ctx.author}**, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –±–æ–ª—å—à–µ 1")
            else:
                cursor.execute("UPDATE users SET cash = cash + {} WHERE id = {}".format(amount,member.id))
                await member.send(f'–ü—Ä–∏–≤–µ—Ç **{member.name}**, **{bot.user.name}** –∑–∞—Å—á–∏—Å–ª–∏–ª –≤–∞–º –ª–∏—Å—Ç–∏–∫–æ–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: **{cursor.execute("SELECT cash FROM users WHERE id = {}".format(member.id)).fetchone()[0]}** :leaves:')
                connection.commit()

                await ctx.message.add_reaction('‚úÖ')
    else:
        await ctx.send(f"**–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ**")

@bot.command(aliases = ['deprive'])
async def __deprive(ctx, member: disnake.Member = None, amount = None):
    if ctx.message.author.guild_permissions.administrator:
        if member is None:
            await ctx.send(f"**{ctx.author}**, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –∂–µ–ª–∞–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–Ω–Ω—É—é —Å—É–º–º—É")
        else:
            if amount is None:
                await ctx.send(f"**{ctx.author}**, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –∂–µ–ª–∞–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å —Å–æ —Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            elif int(amount) < 1:
                await ctx.send(f"*{ctx.author}**, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –±–æ–ª—å—à–µ 1")
            else:
                cursor.execute("UPDATE users SET cash = cash - {} WHERE id = {}".format(int(amount),member.id))
                connection.commit()

                await ctx.message.add_reaction('‚úÖ')

@bot.command(pass_context = True)
async def help(ctx):
    emb = disnake.Embed(title = '**–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–∞–º —Å–µ—Ä–≤–µ—Ä–∞** :leaves:', color = 0x95a5a6)
    emb.set_author(name = bot.user.name, icon_url = bot.user.avatar)

    emb.add_field(name = '**!balance**', value = '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    emb.add_field(name = '**!award**', value = '–í—ã–¥–∞—Ç—å –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
    emb.add_field(name = '**!deprive**', value = '–û—Ç–æ–±—Ä–∞—Ç—å –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç—ã') 
    emb.add_field(name = '**!leaderboard**', value = '–ü–æ—Å–º–æ—Ç–µ—Ä—Ç—å —Ç–æ–ø 10 —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ –±–∞–ª–∞–Ω—Å—É')
    emb.add_field(name = '**Ticket**', value = '–í—ã —Ç–∞–∫ –∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç –≤ —á–∞—Ç–µ <#1299473325327777802>')
    emb.set_footer(text = "–º—è—É")


    await ctx.send(embed = emb,
        components = [
            disnake.ui.Button(style = disnake.ButtonStyle.grey, label = "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?", custom_id = "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?")
        ],
        )

    await ctx.message.add_reaction('‚úÖ')

@bot.listen("on_button_click")
async def help_listener(inter: disnake.MessageInteraction):
    if inter.component.custom_id not in ["–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?"]:
        return

    if inter.component.custom_id == "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?":
        await inter.response.send_message("Contact <@650306540179292160>")

@bot.command(aliases = ['leaderboard', 'lb'])
async def __leaderboard(ctx):
    embed = disnake.Embed(title = '–¢–æ–ø 10 —Å–µ—Ä–≤–µ—Ä–∞')
    counter = 0

    for row in cursor.execute("SELECT name, cash FROM users WHERE server_id = {} ORDER BY cash DESC LIMIT 10".format(ctx.guild.id)):
        counter += 1
        embed.add_field(
            name = f'# {counter} | `{row[0]}`',
            value = f'–ë–∞–ª–∞–Ω—Å: {row[1]}',
            inline = False
            )

    await ctx.send(embed = embed)

class MyModal(disnake.ui.Modal):
    def __init__(self):
        components = [
            disnake.ui.TextInput(
                label="–û–ø–∏—Å–∞–Ω–∏–µ",
                placeholder="–ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?",
                custom_id="description",
                style=disnake.TextInputStyle.paragraph,
            ),
        ]
        super().__init__(
            title="–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞",
            custom_id="create_ticket_modal",
            components=components,
        )

    async def callback(self, inter: disnake.ModalInteraction):
        description = inter.text_values["description"]

        guild = inter.guild
        overwrites = {
            guild.default_role: disnake.PermissionOverwrite(read_messages=False),
            inter.user: disnake.PermissionOverwrite(read_messages=True)
        }

        channel_name = f'ticket-{inter.user.id}'
        channel = await guild.create_text_channel(channel_name, overwrites=overwrites)

        embed = disnake.Embed(title="–í–∞—à —Ç–∏–∫–µ—Ç", description=description, color=disnake.Color.blue())
        embed.add_field(name="–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", value=inter.user.mention)

        await channel.send(embed=embed)
        await channel.send(f'–ü—Ä–∏–≤–µ—Ç {inter.user.mention}, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è')

        close_button = disnake.ui.Button(label="–ó–∞–∫—Ä—ã—Ç—å", style=disnake.ButtonStyle.red, custom_id=f'close_ticket-{inter.user.id}')
        close_view = disnake.ui.View()
        close_view.add_item(close_button)

        await channel.send("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç:", view=close_view)
        await inter.response.send_message(f'–¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω: {channel.mention}', ephemeral=True)
@bot.command()
async def ticket(ctx):
    button = disnake.ui.Button(label="–°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç", style=disnake.ButtonStyle.primary, custom_id="create_ticket")
    view = disnake.ui.View()
    view.add_item(button)

    await ctx.send("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞:", view=view)

    async def button_callback(interaction):
        existing_tickets = [channel for channel in interaction.guild.channels if channel.name.startswith(f'ticket-{interaction.user.id}')]
        
        if existing_tickets:
            await interaction.response.send_message("–í—ã —É–∂–µ –æ—Ç–∫—Ä—ã–ª–∏ —Ç–∏–∫–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–∫—Ä–æ–π—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ.", ephemeral=True)
            return
        
        modal = MyModal()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à –∫–ª–∞—Å—Å MyModal
        await interaction.response.send_modal(modal)

    button.callback = button_callback

@bot.event
async def on_interaction(interaction):
    try:
        if interaction.data['custom_id'].startswith('close_ticket-'):
            user_id = interaction.data['custom_id'].split('-')[1]
            
            if interaction.user.id == int(user_id) or interaction.user.guild_permissions.manage_channels:
                channel = interaction.channel
                await interaction.response.send_message(f'–¢–∏–∫–µ—Ç {channel.mention} –∑–∞–∫—Ä—ã—Ç.', ephemeral=True)
                await channel.delete()
            else:
                await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ —ç—Ç–æ–≥–æ —Ç–∏–∫–µ—Ç–∞.", ephemeral=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ on_interaction: {e}")

@bot.command()
@commands.has_permissions(manage_channels=True)
async def status(ctx): #–ö–æ–º–∞–Ω–¥–∞ status
    open_tickets = [channel for channel in ctx.guild.channels if channel.name.startswith('ticket-')]
    
    if not open_tickets:
        await ctx.send("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.")
        return

    status_message = "–û—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã:\n" + "\n".join([f"{channel.mention} - {channel.name}" for channel in open_tickets])
    await ctx.send(status_message)

@bot.command()
async def close(ctx, channel: disnake.TextChannel): #–ö–æ–º–∞–Ω–¥–∞ close
    if ctx.author.id == int(channel.name.split('-')[1]) or ctx.author.guild_permissions.manage_channels:
        await channel.delete()
        await ctx.send(f'–¢–∏–∫–µ—Ç {channel.mention} –∑–∞–∫—Ä—ã—Ç.')
    else:
        await ctx.send("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ —ç—Ç–æ–≥–æ —Ç–∏–∫–µ—Ç–∞.")

@close.error #–°–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–æ–º —á—Ç–æ —É —á–µ–ª–æ–≤–µ–∫–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø. –∫–æ–º–∞–Ω–Ω–¥—ã close
async def close_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–æ–≤.")
    elif isinstance(error, commands.BadArgument):
        await ctx.send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–∞–Ω–∞–ª.")

@status.error #–°–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–æ–º —á—Ç–æ —É —á–µ–ª–æ–≤–µ–∫–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø. –∫–æ–º–∞–Ω–Ω–¥—ã status
async def status_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∏–∫–µ—Ç–æ–≤.")

roles_shop = {
    "VIP–æ—á–∫–∞": {"cost": 10000, "role_id": 1300142132576784506}
}

@bot.command()
async def shop(ctx):
    embed = disnake.Embed(title="–ú–∞–≥–∞–∑–∏–Ω —Ä–æ–ª–µ–π", description="–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏")
    print('[',date,']','–û—Ç–∫—Ä—ã—Ç –º–∞–≥–∞–∑–∏–Ω')
    
    for role_name, role_info in roles_shop.items():
        embed.add_field(
            name=role_name,
            value=f"–¶–µ–Ω–∞: {role_info['cost']} :leaves:",
            inline=False
        )
    
    await ctx.send(embed=embed)

@bot.command()
async def buy(ctx, role_name: str = None):
    if role_name is None:
        await ctx.send(f"**{ctx.author}**, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `!shop` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π.")
        print('[',date,']','–ü—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã buy –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏')
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∫–∞–∑–∞–Ω–Ω–∞—è —Ä–æ–ª—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ
    if role_name not in roles_shop:
        await ctx.send(f"**{ctx.author}**, —Ä–æ–ª—å '{role_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        print('[',date,']','–†–æ–ª—å –Ω–µ –∫—É–ø–ª–µ–Ω–∞, –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ')
        return

    role_info = roles_shop[role_name]
    role_cost = role_info["cost"]
    role_id = role_info["role_id"]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_balance = cursor.execute("SELECT cash FROM users WHERE id = ?", (ctx.author.id,)).fetchone()
    if user_balance is None or user_balance[0] < role_cost:
        await ctx.send(f"**{ctx.author}**, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ :leaves: –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ä–æ–ª–∏ '{role_name}'.")
        print('[',date,']','–†–æ–ª—å –Ω–µ –∫—É–ø–ª–µ–Ω–∞, –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç –ª–∏—Å—Ç–∏–∫–æ–≤')
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —ç—Ç–∞ —Ä–æ–ª—å
    role = ctx.guild.get_role(role_id)
    if role in ctx.author.roles:
        await ctx.send(f"**{ctx.author}**, —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ä–æ–ª—å '{role_name}'.")
        print('[',date,']','–†–æ–ª—å –Ω–µ –∫—É–ø–ª–µ–Ω–∞, —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å —ç—Ç–∞ —Ä–æ–ª—å')
        return

    # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –∏ –≤—ã–¥–∞—á–∞ —Ä–æ–ª–∏
    cursor.execute("UPDATE users SET cash = cash - ? WHERE id = ?", (role_cost, ctx.author.id))
    connection.commit()
    await ctx.author.add_roles(role)
    
    await ctx.send(f"**{ctx.author}**, –≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —Ä–æ–ª—å '{role_name}' –∑–∞ {role_cost} :leaves:!")
    print('[',date,']','–†–æ–ª—å –∫—É–ø–ª–µ–Ω–∞')

bot.run(settings['token'])
