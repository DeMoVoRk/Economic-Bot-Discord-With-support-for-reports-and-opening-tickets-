import disnake
from disnake.ext import commands, tasks
from disnake.ui import Button, View, Select, Modal, TextInput
from PIL import Image, ImageDraw, ImageFont
from pilmoji import Pilmoji
import io
import requests
import datetime
import time
import os
import sqlite3
from config import settings

intents = disnake.Intents.all()

bot = commands.Bot(command_prefix = settings['prefix'], intents = intents)
bot.remove_command('help')


connection = sqlite3.connect('server.db')
cursor = connection.cursor()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —á–∞—Ç–µ
voice_time_tracking = {}
# –ß–∞—Å—Ç–æ—Ç–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç–∞—Ö
reward_interval_minutes = 5
# –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª (–≤ –ª–∏—Å—Ç–∏–∫–∞—Ö)
reward_per_interval = 10

TICKET_CHANNEL_ID = 1299473325327777802
ticket_admin_messages = {}
date = datetime.datetime.now().time()

last_ctx = None
last_message = None

@bot.event #–ö–æ–¥ —á—Ç–æ–±—ã –±–æ—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—ã –∫–æ—Ç–æ—Ä—ã–µ –µ–º—É –ø–∏—à—É—Ç –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async def on_message(message):
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞
    if message.author == bot.user:
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –õ–°
    if isinstance(message.channel, disnake.DMChannel):
        await message.channel.send("–Ø –∏–≥–Ω–æ—Ä–∏—Ä—É—é –∫–æ–º–∞–Ω–¥—ã –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –õ–°.")
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    await bot.process_commands(message)

@bot.event
async def on_ready():
    if not reward_voice_chat_users.is_running():
        reward_voice_chat_users.start()
    print('Bot connected and voice reward system initialized')

    channel = bot.get_channel(1299473325327777802) #ID –∫–∞–Ω–∞–ª–∞ –∫—É–¥–∞ –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
    if channel:
        await channel.purge(limit=100)
        message = await channel.send("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã..")
        ctx = await bot.get_context(message)

        await ticket(ctx)

        await message.delete()

    cursor.execute("""CREATE TABLE IF NOT EXISTS users (
        name TEXT,
        id INT,
        cash BIGINT,
        rep INT,
        server_id INT
    )""")
    connection.commit()

    for guild in bot.guilds:
        for member in guild.members:
            if cursor.execute(f"SELECT id FROM users WHERE id = {member.id}").fetchone() is None:
                cursor.execute(f"INSERT INTO users VALUES ('{member}',{member.id},0,0, {guild.id})")
                connection.commit()
            else:
                pass

    connection.commit()
    await bot.change_presence(activity = disnake.Activity(name = f'!help üë®‚Äç‚öñÔ∏è', type = disnake.ActivityType.playing))

@bot.event
async def on_member_join(member):
    if cursor.execute(f"SELECT id FROM users WHERE id = {member.id}").fetchone() is None:
        cursor.execute(f"INSERT INTO users VALUES ('{member}',{member.id},0,0, {member.guild.id})")
        connection.commit()
    else:
        pass

@tasks.loop(minutes=reward_interval_minutes)
async def reward_voice_chat_users():
    current_time = datetime.datetime.now()

    for guild in bot.guilds:
        for channel in guild.voice_channels:
            for member in channel.members:
                if member.id in voice_time_tracking:
                    voice_time_tracking[member.id] += reward_interval_minutes
                else:
                    voice_time_tracking[member.id] = reward_interval_minutes
                
                if voice_time_tracking[member.id] >= reward_interval_minutes:
                    cursor.execute("UPDATE users SET cash = cash + ? WHERE id = ?", (reward_per_interval, member.id))
                    connection.commit()

    print(f"[{current_time}] –ù–∞—á–∏—Å–ª–µ–Ω—ã –ª–∏—Å—Ç–∏–∫–∏ –∑–∞ –≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç")

@bot.command(aliases=['balance'])
async def __balance(ctx, member: disnake.Member = None):
    if member is None:
        member = ctx.author

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_balance = cursor.execute("SELECT cash FROM users WHERE id = ?", (member.id,)).fetchone()[0]
    user_name = str(member)

    # –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    avatar_bytes = await member.avatar.read()
    avatar_image = Image.open(io.BytesIO(avatar_bytes))
    avatar_image = avatar_image.resize((100, 100))

    # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è –∫—Ä—É–≥–ª–æ–π –∞–≤–∞—Ç–∞—Ä–∫–∏
    mask = Image.new("L", (100, 100), 0)
    draw_mask = ImageDraw.Draw(mask)
    draw_mask.ellipse((0, 0, 100, 100), fill=255)
    avatar_image = avatar_image.convert("RGBA")
    avatar_image.putalpha(mask)

    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    width, height = 400, 200
    background_color = (30, 30, 30)
    text_color = (255, 255, 255)
    img = Image.new("RGB", (width, height), color=background_color)
    draw = ImageDraw.Draw(img)

    # –ó–∞–¥–∞–µ–º —à—Ä–∏—Ñ—Ç
    try:
        font = ImageFont.truetype('arial.ttf', 20)
    except IOError:
        font = ImageFont.load_default()

    # –í—Å—Ç–∞–≤–ª—è–µ–º –∫—Ä—É–≥–ª—É—é –∞–≤–∞—Ç–∞—Ä–∫—É –∏ —Ç–µ–∫—Å—Ç
    img.paste(avatar_image, (20, 55), avatar_image)
    text_balance = f"–ë–∞–ª–∞–Ω—Å: {user_balance} üçÉ"
    text_user = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}"
    with Pilmoji(img) as pilmoji:
        pilmoji.text((150, 55), text_user, fill=text_color, font=font)
        pilmoji.text((150, 130), text_balance, fill=text_color, font=font)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞–π—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫
    buffer = io.BytesIO()
    img.save(buffer, format="PNG")
    buffer.seek(0)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∞
    button_shop = Button(label="–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", style=disnake.ButtonStyle.green)
    button_transfer = Button(label="–ü–µ—Ä–µ–≤–æ–¥", style=disnake.ButtonStyle.blurple)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω"
    async def button_shop_callback(interaction: disnake.MessageInteraction):
        await show_shop(interaction)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é show_shop

    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –∫–Ω–æ–ø–∫–µ –º–∞–≥–∞–∑–∏–Ω–∞
    button_shop.callback = button_shop_callback

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–≤–æ–¥"
    async def button_transfer_callback(interaction: disnake.MessageInteraction):
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        await interaction.message.delete()
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –ø–µ—Ä–µ–≤–æ–¥–∞
        await open_transfer_menu(interaction)

    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –∫–Ω–æ–ø–∫–µ –ø–µ—Ä–µ–≤–æ–¥–∞
    button_transfer.callback = button_transfer_callback

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    view = View()
    view.add_item(button_shop)
    view.add_item(button_transfer)
    await ctx.send(file=disnake.File(buffer, "balance.png"), view=view)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é –ø–µ—Ä–µ–≤–æ–¥–∞
async def open_transfer_menu(interaction):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    sender_balance = cursor.execute("SELECT cash FROM users WHERE id = ?", (interaction.user.id,)).fetchone()[0]
    if sender_balance <= 0:
        await interaction.response.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.", ephemeral=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ—Ä–≤–µ—Ä–∞ (–¥–æ 25 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    members = [member for member in interaction.guild.members if not member.bot]
    if len(members) > 25:
        members = members[:25]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 25

    # –°–æ–∑–¥–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å–µ—Ä–≤–µ—Ä–∞
    select_menu = Select(
        placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞",
        options=[
            disnake.SelectOption(label=member.display_name, value=str(member.id))
            for member in members
        ]
    )

    async def select_callback(interaction):
        selected_user_id = int(select_menu.values[0])
        await interaction.message.delete()
        await request_transfer_amount(interaction, selected_user_id)

    select_menu.callback = select_callback

    view = View()
    view.add_item(select_menu)
    await interaction.response.send_message("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:", view=view)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å—É–º–º—ã –ø–µ—Ä–µ–≤–æ–¥–∞
async def request_transfer_amount(interaction, selected_user_id):
    # –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
    class TransferModal(Modal):
        def __init__(self):
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã –ø–µ—Ä–µ–≤–æ–¥–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º `custom_id`
            amount_input = TextInput(
                label="–°—É–º–º–∞", 
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É", 
                required=True, 
                max_length=10, 
                custom_id="transfer_amount_input"
            )
            super().__init__(title="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞", components=[amount_input])
            self.amount_input = amount_input

        async def callback(self, interaction):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º interaction.text_values –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
            transfer_amount_str = interaction.text_values["transfer_amount_input"]
            if transfer_amount_str.isdigit():
                transfer_amount = int(transfer_amount_str)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–≤–æ–¥–æ–º
                sender_balance = cursor.execute("SELECT cash FROM users WHERE id = ?", (interaction.user.id,)).fetchone()[0]
                if sender_balance < transfer_amount:
                    await interaction.response.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.", ephemeral=True)
                    return
                
                # –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
                cursor.execute("UPDATE users SET cash = cash - ? WHERE id = ?", (transfer_amount, interaction.user.id))
                cursor.execute("UPDATE users SET cash = cash + ? WHERE id = ?", (transfer_amount, selected_user_id))
                await interaction.response.send_message(f"–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {transfer_amount} üçÉ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <@{selected_user_id}>")
            else:
                await interaction.response.send_message("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.", ephemeral=True)

    modal = TransferModal()
    await interaction.response.send_modal(modal)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
async def show_shop(interaction):
    embed = disnake.Embed(title="–ú–∞–≥–∞–∑–∏–Ω —Ä–æ–ª–µ–π", description="–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏")
    
    for role_name, role_info in roles_shop.items():
        embed.add_field(
            name=role_name,
            value=f"–¶–µ–Ω–∞: {role_info['cost']} üçÉ",
            inline=False
        )
    
    await interaction.response.send_message(embed=embed)

@bot.command(aliases = ['award'])
async def __award(ctx, member: disnake.Member = None, amount: int = None):
    if ctx.message.author.guild_permissions.administrator:
        if member is None:
            await ctx.send(f"**{ctx.author}**, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –∂–µ–ª–∞–µ—Ç–µ –≤—ã–¥–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–Ω–Ω—É—é —Å—É–º–º—É")
        else:
            if amount is None:
                await ctx.send(f"**{ctx.author}**, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –∂–µ–ª–∞–µ—Ç–µ –Ω–∞—á–∏—Å–ª–∏—Ç—å –Ω–∞ —Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            elif amount < 1:
                await ctx.send(f"*{ctx.author}**, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –±–æ–ª—å—à–µ 1")
            else:
                cursor.execute("UPDATE users SET cash = cash + {} WHERE id = {}".format(amount,member.id))
                await member.send(f'–ü—Ä–∏–≤–µ—Ç **{member.name}**, **{bot.user.name}** –∑–∞—Å—á–∏—Å–ª–∏–ª –≤–∞–º –ª–∏—Å—Ç–∏–∫–æ–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: **{cursor.execute("SELECT cash FROM users WHERE id = {}".format(member.id)).fetchone()[0]}** :leaves:')
                connection.commit()

                await ctx.message.add_reaction('‚úÖ')
    else:
        await ctx.send(f"**–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ**")

@bot.command(aliases = ['deprive'])
async def __deprive(ctx, member: disnake.Member = None, amount = None):
    if ctx.message.author.guild_permissions.administrator:
        if member is None:
            await ctx.send(f"**{ctx.author}**, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –∂–µ–ª–∞–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–Ω–Ω—É—é —Å—É–º–º—É")
        else:
            if amount is None:
                await ctx.send(f"**{ctx.author}**, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –∂–µ–ª–∞–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å —Å–æ —Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            elif int(amount) < 1:
                await ctx.send(f"*{ctx.author}**, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –±–æ–ª—å—à–µ 1")
            else:
                cursor.execute("UPDATE users SET cash = cash - {} WHERE id = {}".format(int(amount),member.id))
                connection.commit()

                await ctx.message.add_reaction('‚úÖ')

@bot.command(aliases = ['leaderboard', 'lb'])
async def __leaderboard(ctx):
    embed = disnake.Embed(title = '–¢–æ–ø 10 —Å–µ—Ä–≤–µ—Ä–∞')
    counter = 0

    for row in cursor.execute("SELECT name, cash FROM users WHERE server_id = {} ORDER BY cash DESC LIMIT 10".format(ctx.guild.id)):
        counter += 1
        embed.add_field(
            name = f'# {counter} | `{row[0]}`',
            value = f'–ë–∞–ª–∞–Ω—Å: {row[1]}',
            inline = False
            )

    await ctx.send(embed = embed)

@bot.command(pass_context = True)
async def help(ctx):
    emb = disnake.Embed(title = '**–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–∞–º —Å–µ—Ä–≤–µ—Ä–∞** :leaves:', color = 0x95a5a6)
    emb.set_author(name = bot.user.name, icon_url = bot.user.avatar)

    emb.add_field(name = '**!balance**', value = '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    emb.add_field(name = '**!award**', value = '–í—ã–¥–∞—Ç—å –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
    emb.add_field(name = '**!deprive**', value = '–û—Ç–æ–±—Ä–∞—Ç—å –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç—ã') 
    emb.add_field(name = '**!leaderboard**', value = '–ü–æ—Å–º–æ—Ç–µ—Ä—Ç—å —Ç–æ–ø 10 —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ –±–∞–ª–∞–Ω—Å—É')
    emb.add_field(name = '**Ticket**', value = '–í—ã —Ç–∞–∫ –∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç –≤ —á–∞—Ç–µ <#1299473325327777802>')
    emb.set_footer(text = "–º—è—É")


    await ctx.send(embed = emb,
        components = [
            disnake.ui.Button(style = disnake.ButtonStyle.grey, label = "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?", custom_id = "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?")
        ],
        )

    await ctx.message.add_reaction('‚úÖ')

@bot.listen("on_button_click")
async def help_listener(inter: disnake.MessageInteraction):
    if inter.component.custom_id not in ["–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?"]:
        return

    if inter.component.custom_id == "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?":
        await inter.response.send_message("Contact <@650306540179292160>")

roles_shop = {
    "—Å–æ–∫-rich": {"cost": 1000, "role_id": 1300142132576784506}
}

@bot.command()
async def shop(ctx):
    embed = disnake.Embed(title="–ú–∞–≥–∞–∑–∏–Ω —Ä–æ–ª–µ–π", description="–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏")
    print('[',date,']','–û—Ç–∫—Ä—ã—Ç –º–∞–≥–∞–∑–∏–Ω')
    
    for role_name, role_info in roles_shop.items():
        embed.add_field(
            name=role_name,
            value=f"–¶–µ–Ω–∞: {role_info['cost']} :leaves:",
            inline=False
        )
    
    await ctx.send(embed=embed)

@bot.command()
async def buy(ctx, role_name: str = None):
    if role_name is None:
        await ctx.send(f"**{ctx.author}**, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `!shop` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π.")
        print('[',date,']','–ü—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã buy –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏')
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∫–∞–∑–∞–Ω–Ω–∞—è —Ä–æ–ª—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ
    if role_name not in roles_shop:
        await ctx.send(f"**{ctx.author}**, —Ä–æ–ª—å '{role_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        print('[',date,']','–†–æ–ª—å –Ω–µ –∫—É–ø–ª–µ–Ω–∞, –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ')
        return

    role_info = roles_shop[role_name]
    role_cost = role_info["cost"]
    role_id = role_info["role_id"]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_balance = cursor.execute("SELECT cash FROM users WHERE id = ?", (ctx.author.id,)).fetchone()
    if user_balance is None or user_balance[0] < role_cost:
        await ctx.send(f"**{ctx.author}**, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ :leaves: –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ä–æ–ª–∏ '{role_name}'.")
        print('[',date,']','–†–æ–ª—å –Ω–µ –∫—É–ø–ª–µ–Ω–∞, –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç –ª–∏—Å—Ç–∏–∫–æ–≤')
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —ç—Ç–∞ —Ä–æ–ª—å
    role = ctx.guild.get_role(role_id)
    if role in ctx.author.roles:
        await ctx.send(f"**{ctx.author}**, —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ä–æ–ª—å '{role_name}'.")
        print('[',date,']','–†–æ–ª—å –Ω–µ –∫—É–ø–ª–µ–Ω–∞, —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å —ç—Ç–∞ —Ä–æ–ª—å')
        return

    # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –∏ –≤—ã–¥–∞—á–∞ —Ä–æ–ª–∏
    cursor.execute("UPDATE users SET cash = cash - ? WHERE id = ?", (role_cost, ctx.author.id))
    connection.commit()
    await ctx.author.add_roles(role)
    
    await ctx.send(f"**{ctx.author}**, –≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —Ä–æ–ª—å '{role_name}' –∑–∞ {role_cost} :leaves:!")
    print('[',date,']','–†–æ–ª—å –∫—É–ø–ª–µ–Ω–∞')

class MyModal(disnake.ui.Modal): # –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    def __init__(self):
        components = [
            disnake.ui.TextInput(
                label="–û–ø–∏—Å–∞–Ω–∏–µ",
                placeholder="–ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?",
                custom_id="description",
                style=disnake.TextInputStyle.paragraph,
            ),
        ]
        super().__init__(
            title="–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞",
            custom_id="create_ticket_modal",
            components=components,
        )

    async def callback(self, inter: disnake.ModalInteraction):
        description = inter.text_values["description"]

        guild = inter.guild
        role_name = f"Ticket-{inter.user.id}"
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏ –¥–ª—è —Ç–∏–∫–µ—Ç–∞
        role = await guild.create_role(name=role_name)
        await inter.user.add_roles(role)
        overwrites = {
            guild.default_role: disnake.PermissionOverwrite(read_messages=False),
            inter.user: disnake.PermissionOverwrite(read_messages=True),
            role: disnake.PermissionOverwrite(read_messages=True)
        }
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
        channel_name = f'ticket-{inter.user.id}'
        channel = await guild.create_text_channel(channel_name, overwrites=overwrites)

        # –°–æ–∑–¥–∞–Ω–∏–µ embed
        embed = disnake.Embed(title="–í–∞—à —Ç–∏–∫–µ—Ç", description=description, color=disnake.Color.blue())
        embed.add_field(name="–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", value=inter.user.mention)

        await channel.send(embed=embed)
        await channel.send(f'–ü—Ä–∏–≤–µ—Ç {inter.user.mention}, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è')

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞
        close_button = disnake.ui.Button(label="–ó–∞–∫—Ä—ã—Ç—å", style=disnake.ButtonStyle.red, custom_id=f'close_ticket-{inter.user.id}')
        close_view = disnake.ui.View()
        close_view.add_item(close_button)

        await channel.send("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç:", view=close_view)
        await inter.response.send_message(f'–¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω: {channel.mention}', ephemeral=True)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∞–¥–º–∏–Ω –∫–∞–Ω–∞–ª —Å–æ–æ–±—â–µ–Ω–∏—è —á—Ç–æ —Å–æ–∑–¥–∞–Ω —Ç–∏–∫–µ—Ç
        admin_channel = guild.get_channel(1300843234750234675)
        admin_embed = disnake.Embed(title="–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞", description=f"–û—Ç {inter.user.mention}", color=disnake.Color.green())
        admin_embed.add_field(name="–ñ–∞–ª–æ–±–∞/–ü—Ä–∏—á–∏–Ω–∞", value=description)

        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ç–∏–∫–µ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
        accept_button = disnake.ui.Button(label="–ü—Ä–∏–Ω—è—Ç—å", style=disnake.ButtonStyle.green, custom_id=f'accept_ticket-{inter.user.id}')
        accept_view = disnake.ui.View()
        accept_view.add_item(accept_button)

        admin_message = await admin_channel.send(embed=admin_embed, view=accept_view)
        ticket_admin_messages[inter.user.id] = admin_message.id

def create_ticket_view(): # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–∏–∫–µ—Ç–∞
    button = disnake.ui.Button(label="–°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç", style=disnake.ButtonStyle.primary, custom_id="create_ticket")
    view = disnake.ui.View()
    view.add_item(button)

    async def button_callback(interaction):
        existing_tickets = [channel for channel in interaction.guild.channels if channel.name.startswith(f'ticket-{interaction.user.id}')]

        if existing_tickets:
            await interaction.response.send_message("–í—ã —É–∂–µ –æ—Ç–∫—Ä—ã–ª–∏ —Ç–∏–∫–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–∫—Ä–æ–π—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ.", ephemeral=True)
            return

        modal = MyModal()
        await interaction.response.send_modal(modal)

    button.callback = button_callback
    return view

@bot.command()
async def ticket(ctx): # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –∑–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏
    global last_ctx, last_message
    last_ctx = ctx  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç

    # –°–æ–∑–¥–∞—ë–º –≤–∏–¥ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    view = create_ticket_view()
    if last_message:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É
        await last_message.edit(view=view)
    else:
        last_message = await ctx.send("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞:", view=view)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏
    if not refresh_ticket_button.is_running():
        refresh_ticket_button.start()

@tasks.loop(minutes=4)
async def refresh_ticket_button(): # –ö–∞–∂–¥—ã–π 4 –º–∏–Ω—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    global last_message
    if last_message:
        print('[',date,']',"–û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
        new_view = create_ticket_view()
        await last_message.edit(view=new_view)  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É

@bot.event
async def on_interaction(interaction):
    try:
        # Closing the ticket
        if interaction.data['custom_id'].startswith('close_ticket-'):
            user_id = interaction.data['custom_id'].split('-')[1]
            
            if interaction.user.id == int(user_id) or disnake.utils.get(interaction.user.roles, id=1300843105532117002):
                channel = interaction.channel
                role_name = f"Ticket-{user_id}"
                role = disnake.utils.get(interaction.guild.roles, name=role_name)

                if role:
                    # Fetching the ticket creator to remove the role
                    ticket_creator = await interaction.guild.fetch_member(int(user_id))
                    await ticket_creator.remove_roles(role)
                    
                    # Removing the role from the admin who is closing the ticket
                    await interaction.user.remove_roles(role)

                    # Deleting the role
                    await role.delete()

                await interaction.response.send_message(f'–¢–∏–∫–µ—Ç {channel.mention} –∑–∞–∫—Ä—ã—Ç.', ephemeral=True)
                await channel.delete()
            else:
                await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ —ç—Ç–æ–≥–æ —Ç–∏–∫–µ—Ç–∞.", ephemeral=True)

        # Accepting the ticket
        elif interaction.data['custom_id'].startswith('accept_ticket-'):
            user_id = interaction.data['custom_id'].split('-')[1]
            user = await interaction.guild.fetch_member(int(user_id))
            role_name = f"Ticket-{user_id}"
            role = disnake.utils.get(interaction.guild.roles, name=role_name)

            if not role:
                await interaction.response.send_message("–†–æ–ª—å –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", ephemeral=True)
                return

            await interaction.user.add_roles(role)

            # Granting admin access to the ticket channel
            ticket_channel = disnake.utils.get(interaction.guild.channels, name=f'ticket-{user_id}')
            if ticket_channel:
                await ticket_channel.set_permissions(interaction.user, read_messages=True)
                await interaction.response.send_message(f'–í—ã –ø—Ä–∏–Ω—è–ª–∏ —Ç–∏–∫–µ—Ç –∏ –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ {ticket_channel.mention}.', ephemeral=True)

                # Retrieve the admin message to update
                admin_channel = interaction.guild.get_channel(1300843234750234675)  # Replace with admin channel ID
                admin_message_id = ticket_admin_messages.get(int(user_id))
                
                if admin_message_id:
                    admin_message = await admin_channel.fetch_message(admin_message_id)
                    # Updating embed to show who accepted the ticket
                    updated_embed = admin_message.embeds[0]
                    updated_embed.add_field(name="–ü—Ä–∏–Ω—è—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", value=interaction.user.mention, inline=False)

                    # Removing the "–ü—Ä–∏–Ω—è—Ç—å" button
                    new_view = disnake.ui.View()

                    # Editing the admin message to reflect the acceptance
                    await admin_message.edit(embed=updated_embed, view=new_view)
            else:
                await interaction.response.send_message("–ö–∞–Ω–∞–ª –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ on_interaction: {e}")

@bot.command()
@commands.has_permissions(manage_channels=True)
async def status(ctx): #–ö–æ–º–∞–Ω–¥–∞ status
    open_tickets = [channel for channel in ctx.guild.channels if channel.name.startswith('ticket-')]
    
    if not open_tickets:
        await ctx.send("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.")
        return

    status_message = "–û—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã:\n" + "\n".join([f"{channel.mention} - {channel.name}" for channel in open_tickets])
    await ctx.send(status_message)

@bot.command()
async def close(ctx, channel: disnake.TextChannel): #–ö–æ–º–∞–Ω–¥–∞ close
    if ctx.author.id == int(channel.name.split('-')[1]) or ctx.author.guild_permissions.manage_channels:
        await channel.delete()
        await ctx.send(f'–¢–∏–∫–µ—Ç {channel.mention} –∑–∞–∫—Ä—ã—Ç.')
    else:
        await ctx.send("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ —ç—Ç–æ–≥–æ —Ç–∏–∫–µ—Ç–∞.")

@close.error #–°–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–æ–º —á—Ç–æ —É —á–µ–ª–æ–≤–µ–∫–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø. –∫–æ–º–∞–Ω–Ω–¥—ã close
async def close_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–æ–≤.")
    elif isinstance(error, commands.BadArgument):
        await ctx.send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–∞–Ω–∞–ª.")

@status.error #–°–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–æ–º —á—Ç–æ —É —á–µ–ª–æ–≤–µ–∫–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø. –∫–æ–º–∞–Ω–Ω–¥—ã status
async def status_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∏–∫–µ—Ç–æ–≤.")

bot.run(settings['token'])
